/*
    Even though target solution is written in C,
    we just call that function from C++ for convenience.
*/

// TCH Helper
#include "tchio.hpp"

// Standard libraries
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <stdexcept>
#include <new>

// MLE handler
void handler(){
    throw std::bad_alloc();
}

// Solution function
extern "C" $ReturnCType solution($ParameterArgs);

// Main function
int main(int argc, char **argv){

    // MLE handler
    std::set_new_handler(handler);

    // Get input and parse
    $InitCppParameters;
    try{
        $GetCppParameters;
    }
    catch(const std::exception &err){
        std::cerr << "Failed to parsing parameters on solution: "
            << err.what() << std::endl;
        return $ExitCodeInputParsingError;
    }

    // Convert Cpp params to C params
    $InitCParameters;
    try{
        $ConvertParametersCppC;
    }
    catch(const std::exception &err){
        std::cerr << "Failed to convert parameters C++ -> C: "
            << err.what() << std::endl;
        return $ExitCodeSolutionFailed;
    }

    // Execution
    $ReturnCType result;
    try{
        result = solution($SendParameters);
    }
    catch(const std::bad_alloc &e) {
        std::cerr << "Memory allocation failed: " 
            << e.what() << '\n';
        return $ExitCodeMLE;
    }
    catch(const std::exception &err){
        std::cerr << "Solution function failed: "
            << err.what() << std::endl;
        $FreeCParameters;
        return $ExitCodeSolutionFailed;
    }
    $FreeCParameters;

    // Convert C result to Cpp result
    $ReturnCppType resultCpp;
    try{
        resultCpp = TCH::Data<$ReturnTypeBaseCpp, 
            $ReturnDimension>::convert_c_cpp(result);
    }
    catch(const std::exception &err){
        std::cerr << "Failed to convert parameters C++ -> C: "
            << err.what() << std::endl;
        TCH::Data<$ReturnTypeBaseCpp, $ReturnDimension>::superfree(result);
        return $ExitCodeSolutionFailed;
    }
    TCH::Data<$ReturnTypeBaseCpp, $ReturnDimension>::superfree(result);

    // Print out
    try{
        std::ofstream outfile(argv[1]);
        TCH::Data<$ReturnTypeBaseCpp, 
            $ReturnDimension>::put(outfile, resultCpp);
    }
    catch(const std::exception &err){
        std::cerr << "Failed to print result on solution"
            << err.what() << std::endl;
        return $ExitCodeWrongTypeGenerated;
    }

    // Success
    return $ExitCodeSuccess;
}